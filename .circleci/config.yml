# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  format:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/ory/ory
    steps:
      - checkout
      - run:
          name: Enable go1.11 modules
          command: |
            echo 'export GO111MODULE=on' >> $BASH_ENV
            source $BASH_ENV
      - run: curl -L https://git.io/vp6lP | sh
      - run: mv ./bin/* $GOPATH/bin
      - run: go mod download
      - run: go mod vendor
      - run: GO111MODULE=off gometalinter --disable-all --enable=goimports --enable=vet --vendor ./...

  test:
    docker:
      - image: circleci/golang:1.11
          working_directory: /go/src/github.com/ory/ory
    steps:
      - run:
          name: Enable go1.11 modules
          command: |
            echo 'export GO111MODULE=on' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run: go mod download
      - run: go get -u github.com/mattn/goveralls golang.org/x/tools/cmd/cover github.com/ory/go-acc
      - run: go-acc -o coverage.txt ./... -- -failfast -timeout=20m
#      Running race conditions requires parallel tests, otherwise it's worthless (which is the case)
#      - run: go test -race -short $(go list ./... | grep -v cmd)
#      - run: test -z "$CIRCLE_PR_NUMBER" && goveralls -service=circle-ci -coverprofile=coverage.txt -repotoken=$COVERALLS_REPO_TOKEN || echo "forks are not allowed to push to coveralls"

  build-docker:
    docker:
      - image: library/docker:17.10
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.10.0-ce
      - run: docker build -f Dockerfile -t hydra-test .
      - run: docker build -f Dockerfile-alpine -t hydra-test-alpine .
      - run: docker run hydra-test help

  release-docker:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - run:
          name: Enable go1.11 modules
          command: |
            echo 'export GO111MODULE=on' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - setup_remote_docker:
          version: 17.10.0-ce
      # Build and push docker image
      - run: docker build --build-arg git_tag=$(git describe --tags) --build-arg git_commit=$(git rev-parse HEAD) -f Dockerfile -t oryd/hydra:$(echo $CIRCLE_TAG | tr '+' '_') .
      - run: docker build --build-arg git_tag=$(git describe --tags) --build-arg git_commit=$(git rev-parse HEAD) -f Dockerfile-alpine -t oryd/hydra:$(echo $CIRCLE_TAG | tr '+' '_')-alpine .
      - run: docker login --username "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"
      - run: docker push oryd/hydra:$(echo $CIRCLE_TAG | tr '+' '_')
      - run: docker push oryd/hydra:$(echo $CIRCLE_TAG | tr '+' '_')-alpine

  release:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/hydra
    steps:
      - checkout
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run: |
          npm version -f --no-git-tag-version $CIRCLE_TAG
      - run: npm publish --access public

  release-binaries:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/ory/hydra
    steps:
      - run:
          name: Enable go1.11 modules
          command: |
            echo 'export GO111MODULE=on' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run: go get -u github.com/mitchellh/gox github.com/tcnksm/ghr
      - run: |
          gox -parallel=2 -ldflags "-X github.com/ory/hydra/cmd.Version=`git describe --tags` -X github.com/ory/hydra/cmd.BuildTime=`TZ=UTC date -u '+%Y-%m-%dT%H:%M:%SZ'` -X github.com/ory/hydra/cmd.GitHash=`git rev-parse HEAD`" -output "dist/{{.Dir}}-{{.OS}}-{{.Arch}}";
      - run: ghr -t $GITHUB_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME --replace `git describe --tags` dist/

  release-changelog:
    docker:
      - image: circleci/ruby:2.4-node
    steps:
      - checkout
      - run: gem install github_changelog_generator
      - run: sudo npm i -g doctoc
      - run: github_changelog_generator -u ory -p hydra -o CHANGELOG.md --token $GITHUB_TOKEN
      - run: doctoc CHANGELOG.md
      - run: git config --global user.email "circleci@ory.am"
      - run: git config --global user.name "ORY Continuous Integration"
      - run: git add CHANGELOG.md
      - run: |
          git commit -m "docs: Incorporates changes from version $(git describe --tags)" -- CHANGELOG.md
      - run: git remote rm origin
      - run: git remote add origin https://arekkas:$GITHUB_TOKEN@github.com/ory/hydra.git
      - run: git push origin HEAD:master

workflows:
  version: 2
  "test, build, push, and deploy":
    jobs:
      - format:
          filters:
            tags:
              only: /.*/
      - test:
          requires:
#            - generators
          filters:
            tags:
              only: /.*/
      - test-e2e-opaque:
          requires:
            - test
          filters:
            tags:
              only: /.*/
      - test-e2e-jwt:
          requires:
            - test
          filters:
            tags:
              only: /.*/
      - test-e2e-plugin:
          requires:
            - test
          filters:
            tags:
              only: /.*/
      - release-docs:
          filters:
            branches:
              only: master
      - benchmark:
          # Avoids race conditions when pushing
          requires:
            - release-docs
          filters:
            branches:
              only: master
#      - generators:
#          filters:
#            tags:
#              only: /.*/
      - build-docker:
          requires:
            - test
#            - generators
            - format
            - test-e2e-opaque
            - test-e2e-plugin
            - test-e2e-jwt
          filters:
            tags:
              only: /.*/
      - release-binaries:
          requires:
            - build-docker
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-docker:
          requires:
            - build-docker
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-npm:
          requires:
            - build-docker
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-changelog:
          requires:
            - release-docker
            - release-npm
            - release-binaries
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
